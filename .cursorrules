# Potions - Cursor IDE Rules

## Project Context
Potions is a cross-platform development environment setup tool. It installs and configures tools like Zsh, Git, NeoVim, Tmux on macOS, WSL, Termux, and Debian/Linux systems.

## Code Style

### Bash Scripting
- Use bash 4.0+ syntax with POSIX compatibility where possible
- Always quote variables: `"$VAR"` not `$VAR`
- Use `local` for function-scoped variables
- Always include shebang: `#!/bin/bash`
- Use `set -e` or `set -eo pipefail` for error handling
- Functions: `function_name() { ... }` (POSIX style)

### Naming Conventions
- Functions: `snake_case` (e.g., `install_package`, `is_macos`)
- Constants/Env vars: `UPPER_SNAKE_CASE` (e.g., `POTIONS_HOME`, `OS_TYPE`)
- Local variables: `lower_snake_case`
- Files: `lowercase.sh` for scripts, `lowercase` for directories

### File Organization
1. Shebang
2. Header comments (purpose, author)
3. Source dependencies
4. Global constants
5. Helper functions
6. Main logic
7. Entry point (if needed)

## Critical Requirements

### 1. Idempotency
ALL scripts must be idempotent (safe to run multiple times). Always check if something exists before creating/installing.

### 2. Platform Support
- MUST support all platforms: macOS, WSL, Termux, Debian/Linux
- Use platform detection functions: `is_macos()`, `is_wsl()`, `is_termux()`, `is_linux()`
- Never hardcode platform-specific assumptions

### 3. User Data Preservation
- NEVER overwrite user files without backup
- Preserve customizations in `.zsh_aliases`, `sources/*.sh`
- Create backups before modifications (use `.backup` extension)

### 4. Error Handling
- Use `log_error()` for errors (from `accessories.sh` or `upgrade.sh`)
- Return error codes from functions, don't exit unless critical
- Check command existence before use: `command_exists tool`
- Use `safe_source()` for sourcing files
- Clean up temporary files with `trap cleanup EXIT`

### 5. Path Resolution
- Never assume current directory
- Use `SCRIPT_DIR` and `REPO_ROOT` from `accessories.sh`
- Use `$POTIONS_HOME` for user directory
- Always resolve paths relative to script location

## Code Patterns

### Platform Detection
```bash
if is_macos; then
  # macOS code
elif is_termux; then
  # Termux code
elif is_wsl || is_linux; then
  # Linux/WSL code
fi
```

### Package Installation
```bash
# Use existing function (preferred)
install_package package_name

# Or check first
if ! command_exists package_name; then
  install_package package_name
fi
```

### Logging
```bash
# Use standardized logging
log "Message"                          # Basic (accessories.sh)
log_info "Information"                 # Info (upgrade.sh)
log_success "Success message"          # Success
log_error "Error message"              # Error
log_warning "Warning message"          # Warning
```

### File Operations
```bash
# Always backup user files
if [ -f "$user_file" ]; then
  cp "$user_file" "$user_file.backup"
fi
cp "$new_file" "$user_file"
```

### Temporary Files
```bash
TEMP_DIR=$(mktemp -d)
cleanup() {
  rm -rf "$TEMP_DIR"
}
trap cleanup EXIT
```

## File Locations

### Core Files
- `packages/accessories.sh` - Core utilities (read first!)
- `install.sh` - Main installation flow
- `upgrade.sh` - Upgrade and backup logic
- `drink.sh` - One-line installer

### Package Structure
- `packages/common/` - Cross-platform logic
- `packages/macos/` - macOS-specific installers
- `packages/wsl/` - WSL-specific installers
- `packages/termux/` - Termux-specific installers
- `packages/debian/` - Debian/Linux-specific installers

### Configuration
- `.potions/` - User configuration directory
- `.potions/.zshrc` - Zsh configuration
- `.potions/.zsh_aliases` - User aliases (preserved on upgrade)
- `.potions/sources/` - Platform-specific sources (preserved)

## Common Functions Reference

From `packages/accessories.sh`:
- `log(message)` - Basic logging
- `command_exists(command)` - Check if command available
- `safe_source(file)` - Source file if exists
- `ensure_directory(dir)` - Create directory if needed
- `install_package(package)` - Install platform-specific package
- `unpack_it(package)` - Source common package script
- `is_macos()`, `is_wsl()`, `is_termux()`, `is_linux()` - Platform detection
- `exit_with_message(message)` - Exit with error

From `upgrade.sh`:
- `log_info(message)` - Info message with formatting
- `log_success(message)` - Success message
- `log_error(message)` - Error message
- `log_warning(message)` - Warning message
- `log_step(title)` - Section header

## Anti-Patterns to Avoid

### ❌ DON'T:
- Hardcode paths: `cd ~/.potions` → Use `cd "$POTIONS_HOME"`
- Assume current directory: `source packages/accessories.sh` → Use absolute paths
- Skip error checks: `make install` → Check exit code
- Overwrite user files: `cp new_file ~/.zshrc` → Backup first
- Platform assumptions: `brew install` → Check platform first
- Leave temp files: Create but never clean up
- Inconsistent logging: Mix `echo` and `log`

### ✅ DO:
- Use variables: `cd "$POTIONS_HOME"`
- Resolve paths: `source "$REPO_ROOT/packages/accessories.sh"`
- Check errors: `command || { log_error "..."; exit 1; }`
- Backup files: Copy to `.backup` before overwriting
- Detect platform: `if is_macos; then ...`
- Clean up: Use `trap cleanup EXIT`
- Standardize logging: Use `log_*` functions

## Testing Requirements

Before submitting:
- [ ] Test idempotency (run script twice)
- [ ] Test on macOS (if available)
- [ ] Test error scenarios (missing dependencies, network failures)
- [ ] Verify user data preservation (backups created)
- [ ] Check exit codes (errors exit with non-zero)
- [ ] Validate script syntax: `bash -n script.sh`

## Documentation

- Add comments for complex logic
- Explain WHY, not just WHAT
- Document platform-specific behavior
- Update README.md for user-facing changes
- Reference related files/functions in comments

## When Implementing Features

1. **Read related code first**: Find similar implementations
2. **Check utilities**: Look in `accessories.sh` for helper functions
3. **Review platform variants**: Understand differences between platforms
4. **Test incrementally**: Test each platform, verify idempotency
5. **Preserve compatibility**: Don't break existing installations

## Key Principles

1. **Idempotency**: Scripts must be safe to run multiple times
2. **Platform support**: All platforms must be supported
3. **User safety**: Never lose user data, always backup
4. **Error handling**: Graceful failures with helpful messages
5. **Maintainability**: Clear code, good comments, consistent patterns

## Quick Reference

### Adding a New Package
1. Create `packages/{platform}/package.sh` for each platform
2. Optionally create `packages/common/package.sh` for shared logic
3. Add to `install.sh` package list
4. Test on all platforms

### Modifying Config Files
1. Update template in `.potions/`
2. Ensure upgrade script preserves user customizations
3. Test upgrade path

### Debugging
- Use `set -x` for command tracing
- Add `debug()` function for temporary logging
- Check `$POTIONS_HOME`, `$SCRIPT_DIR`, `$REPO_ROOT` variables
- Verify platform detection: `echo "$(is_macos && echo 'macOS' || echo 'Other')"`

## Context for AI Agents

When working on Potions:
1. Always consider all platforms (macOS, WSL, Termux, Debian)
2. Prioritize user data safety (backups, preservation)
3. Ensure idempotency (safe reruns)
4. Use existing utility functions (don't reinvent)
5. Follow established patterns (look at similar code)
6. Test error scenarios, not just happy path
7. Document complex logic

For detailed guidance, see `AGENT.md`.
